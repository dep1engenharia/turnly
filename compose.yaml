# WARNING!
# Use this file only for development purposes.
# We're exposing here sensitive ports and services.

x-environment: &environment
  NODE_ENV: ${NODE_ENV}
  APP_DOMAIN: ${APP_DOMAIN}
  GRPC_CONSUMER_ADDRESS: ${GRPC_CONSUMER_ADDRESS}
  APP_PORT: ${APP_PORT}
  AUTH_ISSUER: ${AUTH_ISSUER}
  AUTH_JWKS_URI: ${AUTH_JWKS_URI}
  LOGGING_LEVEL: ${LOGGING_LEVEL}
  SENTRY_DSN: ${SENTRY_DSN}
  FLUENT_HOST: ${FLUENT_HOST}
  FLUENT_PORT: ${FLUENT_PORT}
  TRACING_ENDPOINT: ${TRACING_ENDPOINT}
  MONGO_URI: ${MONGO_URI}
  ELASTICSEARCH_URI: ${ELASTICSEARCH_URI}
  RABBITMQ_URI: ${RABBITMQ_URI}
  RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
  TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
  TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
  TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
  DB_DEBUG: ${DB_DEBUG}

services:
  gateway:
    image: traefik:v3.0
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 80:80
      - ${TRAEFIK_UI_PORT}:8080
    networks:
      - turnly.vpc.internal

  branch-management:
    image: ghcr.io/turnly/branch-management:latest
    build: ./apps/branch-management
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: branch-management
      MONGO_DB: branch-management-db
      RABBITMQ_QUEUE: turnly.ms.branch-management.queue
    networks:
      turnly.vpc.internal:
        aliases:
          - branch-management.turnly.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.branch-management.entrypoints=web
      - traefik.http.routers.branch-management.service=branch-management
      - traefik.http.services.branch-management.loadbalancer.server.scheme=h2c
      - traefik.http.services.branch-management.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.branch-management.rule=PathPrefix(`/turnly.branch_management.v1`)

  business-data-fields:
    image: ghcr.io/turnly/business-data-fields:latest
    build: ./apps/business-data-fields
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: business-data-fields
      MONGO_DB: business-data-fields-db
      RABBITMQ_QUEUE: turnly.ms.business-data-fields.queue
    networks:
      turnly.vpc.internal:
        aliases:
          - business-data-fields.turnly.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.business-data-fields.entrypoints=web
      - traefik.http.routers.business-data-fields.service=business-data-fields
      - traefik.http.services.business-data-fields.loadbalancer.server.scheme=h2c
      - traefik.http.services.business-data-fields.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.business-data-fields.rule=PathPrefix(`/turnly.business_data_fields.v1`)

<<<<<<< HEAD
=======
  tenancy:
    image: ghcr.io/turnly/tenancy:latest
    build: ./apps/tenancy
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: tenancy
      MONGO_DB: tenancy-db
      RABBITMQ_QUEUE: turnly.ms.tenancy.queue
    networks:
      turnly.vpc.internal:
        aliases:
          - tenancy.turnly.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.tenancy.entrypoints=web
      - traefik.http.routers.tenancy.service=tenancy
      - traefik.http.services.tenancy.loadbalancer.server.scheme=h2c
      - traefik.http.services.tenancy.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.tenancy.rule=PathPrefix(`/turnly.tenancy.v1`)

>>>>>>> 2a25d5d8ede4f54c842fa84e722a5ad1116875ec
  channels:
    image: ghcr.io/turnly/channels:latest
    build: ./apps/channels
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: channels
      MONGO_DB: channels-db
      RABBITMQ_QUEUE: turnly.ms.channels.queue
    networks:
      turnly.vpc.internal:
        aliases:
          - channels.turnly.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.channels.entrypoints=web
      - traefik.http.routers.channels.service=channels
      - traefik.http.services.channels.loadbalancer.server.scheme=h2c
      - traefik.http.services.channels.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.channels.rule=PathPrefix(`/turnly.channels.v1`)

  queuing-system:
    image: ghcr.io/turnly/queuing-system:latest
    build: ./apps/queuing-system
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: queuing-system
      MONGO_DB: queuing-system-db
      RABBITMQ_QUEUE: turnly.ms.queuing-system.queue
    networks:
      turnly.vpc.internal:
        aliases:
          - queuing-system.turnly.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.queuing-system.entrypoints=web
      - traefik.http.routers.queuing-system.service=queuing-system
      - traefik.http.services.queuing-system.loadbalancer.server.scheme=h2c
      - traefik.http.services.queuing-system.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.queuing-system.rule=PathPrefix(`/turnly.queuing-system.v1`)

  queuing-system-api:
    image: ghcr.io/turnly/queuing-system-api:latest
    build: ./apps/queuing-system-api
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: queuing-system-api
    networks:
      - turnly.vpc.internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.queuing-system-api.entrypoints=web
      - traefik.http.routers.queuing-system-api.service=queuing-system-api
      - traefik.http.services.queuing-system-api.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.queuing-system-api.rule=PathPrefix(`/api/queuing-system`)

  queuing-system-rtm:
    image: ghcr.io/turnly/queuing-system-rtm:latest
    build: ./apps/queuing-system-rtm
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: queuing-system-rtm
      RABBITMQ_QUEUE: turnly.ms.queuing-system-rtm.queue
    networks:
      - turnly.vpc.internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.queuing-system-rtm.entrypoints=web
      - traefik.http.routers.queuing-system-rtm.service=queuing-system-rtm
      - traefik.http.services.queuing-system-rtm.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.queuing-system-rtm.rule=PathPrefix(`/api/rtm/queuing-system`)

  helpdesk-api:
    image: ghcr.io/turnly/helpdesk-api:latest
    build: ./apps/helpdesk-api
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: helpdesk-api
    networks:
      - turnly.vpc.internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.helpdesk-api.entrypoints=web
      - traefik.http.routers.helpdesk-api.service=helpdesk-api
      - traefik.http.services.helpdesk-api.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.helpdesk-api.rule=PathPrefix(`/api/helpdesk`)

  helpdesk-rtm:
    image: ghcr.io/turnly/helpdesk-rtm:latest
    build: ./apps/helpdesk-rtm
    restart: unless-stopped
    environment:
      <<: *environment
      APP_NAME: helpdesk-rtm
      RABBITMQ_QUEUE: turnly.ms.helpdesk-rtm.queue
    networks:
      - turnly.vpc.internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.helpdesk-rtm.entrypoints=web
      - traefik.http.routers.helpdesk-rtm.service=helpdesk-rtm
      - traefik.http.services.helpdesk-rtm.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.helpdesk-rtm.rule=PathPrefix(`/api/rtm/helpdesk`)

networks:
  turnly.vpc.internal:
    name: turnly.vpc.internal
