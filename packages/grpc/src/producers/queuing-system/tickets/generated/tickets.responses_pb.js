// source: tickets.responses.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.CreateTicketResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.ServeTicketResponse', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.Ticket', null, global);
goog.exportSymbol('proto.turnly.queuing_system.v1.tickets.Ticket.Rating', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.Ticket.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.Ticket.displayName = 'proto.turnly.queuing_system.v1.tickets.Ticket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.Ticket.Rating, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.Ticket.Rating.displayName = 'proto.turnly.queuing_system.v1.tickets.Ticket.Rating';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.CreateTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.CreateTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.repeatedFields_, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.ServeTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.ServeTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.displayName = 'proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.Ticket.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 3, ""),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    displayCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    serviceId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    locationId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    customerId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    assigneeId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    rating: (f = msg.getRating()) && proto.turnly.queuing_system.v1.tickets.Ticket.Rating.toObject(includeInstance, f),
    extrasList: jspb.Message.toObjectList(msg.getExtrasList(),
    common_pb.Extra.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.Ticket;
  return proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigneeId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 11:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket.Rating;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.Rating.deserializeBinaryFromReader);
      msg.setRating(value);
      break;
    case 12:
      var value = new common_pb.Extra;
      reader.readMessage(value,common_pb.Extra.deserializeBinaryFromReader);
      msg.addExtras(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDisplayCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLocationId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCustomerId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAssigneeId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRating();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.Rating.serializeBinaryToWriter
    );
  }
  f = message.getExtrasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      common_pb.Extra.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.Ticket.Rating.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.Ticket.Rating;
  return proto.turnly.queuing_system.v1.tickets.Ticket.Rating.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScore(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.Ticket.Rating.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScore();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string score = 1;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.getScore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.setScore = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket.Rating} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.Rating.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string priority = 3;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setPriority = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string display_code = 5;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getDisplayCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setDisplayCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string service_id = 6;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string location_id = 7;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getLocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setLocationId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string customer_id = 8;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getCustomerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setCustomerId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string assignee_id = 9;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getAssigneeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setAssigneeId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string created_at = 10;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Rating rating = 11;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket.Rating}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getRating = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket.Rating} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket.Rating, 11));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket.Rating|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
*/
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setRating = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.clearRating = function() {
  return this.setRating(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.hasRating = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated turnly.common.v1.Extra extras = 12;
 * @return {!Array<!proto.turnly.common.v1.Extra>}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.getExtrasList = function() {
  return /** @type{!Array<!proto.turnly.common.v1.Extra>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Extra, 12));
};


/**
 * @param {!Array<!proto.turnly.common.v1.Extra>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
*/
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.setExtrasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.turnly.common.v1.Extra=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.common.v1.Extra}
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.addExtras = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.turnly.common.v1.Extra, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket} returns this
 */
proto.turnly.queuing_system.v1.tickets.Ticket.prototype.clearExtrasList = function() {
  return this.setExtrasList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.CreateTicketResponse;
  return proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.CreateTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.CreateTicketResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse;
  return proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketDetailsResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketResponse;
  return proto.turnly.queuing_system.v1.tickets.GetTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.turnly.queuing_system.v1.tickets.Ticket.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse;
  return proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket data = 1;
 * @return {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.turnly.queuing_system.v1.tickets.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsBeforeYoursResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse;
  return proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitingFor: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.turnly.queuing_system.v1.tickets.Ticket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets;
  return proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitingFor(value);
      break;
    case 2:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaitingFor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string waiting_for = 1;
 * @return {string}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.getWaitingFor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.setWaitingFor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Ticket tickets = 2;
 * @return {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.getTicketsList = function() {
  return /** @type{!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 2));
};


/**
 * @param {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.setTicketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.turnly.queuing_system.v1.tickets.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets.prototype.clearTicketsList = function() {
  return this.setTicketsList([]);
};


/**
 * repeated ServiceTickets data = 1;
 * @return {!Array<!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets>}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets, 1));
};


/**
 * @param {!Array<!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.ServiceTickets, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsWaitingForServiceResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.turnly.queuing_system.v1.tickets.Ticket.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse;
  return proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket data = 1;
 * @return {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.turnly.queuing_system.v1.tickets.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.GetTicketsForServingFromLocationResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.turnly.queuing_system.v1.tickets.Ticket.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse;
  return proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket data = 1;
 * @return {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {!Array<!proto.turnly.queuing_system.v1.tickets.Ticket>} value
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.turnly.queuing_system.v1.tickets.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.turnly.queuing_system.v1.tickets.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.SearchTicketsToDisplayOnDigitalSignageResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse;
  return proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.LeaveTicketResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse;
  return proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.AnnounceMyArrivalResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse;
  return proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.CallTicketToDeskResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.ServeTicketResponse;
  return proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.ServeTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.ServeTicketResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse;
  return proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.DiscardTicketResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.turnly.queuing_system.v1.tickets.Ticket.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && common_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse;
  return proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.turnly.queuing_system.v1.tickets.Ticket;
      reader.readMessage(value,proto.turnly.queuing_system.v1.tickets.Ticket.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new common_pb.Meta;
      reader.readMessage(value,common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.turnly.queuing_system.v1.tickets.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket data = 1;
 * @return {?proto.turnly.queuing_system.v1.tickets.Ticket}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.getData = function() {
  return /** @type{?proto.turnly.queuing_system.v1.tickets.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.turnly.queuing_system.v1.tickets.Ticket, 1));
};


/**
 * @param {?proto.turnly.queuing_system.v1.tickets.Ticket|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional turnly.common.v1.Meta meta = 2;
 * @return {?proto.turnly.common.v1.Meta}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.getMeta = function() {
  return /** @type{?proto.turnly.common.v1.Meta} */ (
    jspb.Message.getWrapperField(this, common_pb.Meta, 2));
};


/**
 * @param {?proto.turnly.common.v1.Meta|undefined} value
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} returns this
*/
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse} returns this
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.turnly.queuing_system.v1.tickets.ReturnToQueueResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.turnly.queuing_system.v1.tickets);
